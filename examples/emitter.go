// Generated by: genem (https://github.com/shiwano/genem)

package event

import (
	"reflect"
	"sync"

	"time"
)

// Emitter represents an event emitter.
type Emitter struct {
	clickEventMu            *sync.Mutex
	clickEventListeners     []func(point Point, clickedAt time.Time)
	clickEventListenersOnce []func(point Point, clickedAt time.Time)
}

// NewEmitter creates an event emitter.
func NewEmitter() *Emitter {
	return &Emitter{

		clickEventMu: new(sync.Mutex),
	}
}

// EmitClickEvent emits the specified event.
func (_e *Emitter) EmitClickEvent(point Point, clickedAt time.Time) {
	_e.clickEventMu.Lock()
	listeners := make([]func(point Point, clickedAt time.Time), len(_e.clickEventListeners))
	copy(listeners, _e.clickEventListeners)
	listenersOnce := _e.clickEventListenersOnce
	_e.clickEventListenersOnce = make([]func(point Point, clickedAt time.Time), 0)
	_e.clickEventMu.Unlock()
	for _, l := range listeners {
		l(point, clickedAt)
	}
	for _, l := range listenersOnce {
		l(point, clickedAt)
	}
}

// AddClickEventListener registers the specified event listener.
func (_e *Emitter) AddClickEventListener(listener func(point Point, clickedAt time.Time)) {
	_e.clickEventMu.Lock()
	_e.clickEventListeners = append(_e.clickEventListeners, listener)
	_e.clickEventMu.Unlock()
}

// AddClickEventListenerOnce registers the specified event listener that is invoked only once.
func (_e *Emitter) AddClickEventListenerOnce(listener func(point Point, clickedAt time.Time)) {
	_e.clickEventMu.Lock()
	_e.clickEventListenersOnce = append(_e.clickEventListenersOnce, listener)
	_e.clickEventMu.Unlock()
}

// RemoveClickEventListener removes the event listener previously registered.
func (_e *Emitter) RemoveClickEventListener(listener func(point Point, clickedAt time.Time)) {
	listenerPtr := reflect.ValueOf(listener).Pointer()
	_e.clickEventMu.Lock()
	listeners := _e.clickEventListeners[:0]
	for _, l := range _e.clickEventListeners {
		if reflect.ValueOf(l).Pointer() != listenerPtr {
			listeners = append(listeners, l)
		}
	}
	_e.clickEventListeners = listeners
	listenersOnce := _e.clickEventListenersOnce[:0]
	for _, l := range _e.clickEventListenersOnce {
		if reflect.ValueOf(l).Pointer() != listenerPtr {
			listenersOnce = append(listenersOnce, l)
		}
	}
	_e.clickEventListenersOnce = listenersOnce
	_e.clickEventMu.Unlock()
}
